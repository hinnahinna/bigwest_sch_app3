<% provide(:title, "シフト申請") %>

<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">

<div class="row">
  <div class="col-md-6">
    <%= form_with model: @requestschedule do |f| %>
      <h3>シフト申請</h3>

      <div class="request-schedule-field">
        <% if current_user.admin? %>
          <%= f.label :ユーザ名 %><br>
          <%= f.collection_select :user_id, @users, :id, :username, {selected: current_user.id} %>
        <% else %>
          <%= f.hidden_field :user_id, :value => current_user.id %>
        <% end %>
      </div>

      <div class="request-schedule-field">
        <%= f.label :シフト申請先店舗 %><br>
        <%= f.collection_select :store_id, Store.all, :id, :storename %>
      </div>

      <div class="request-schedule-field">
        <%= f.label :シフト申請日 %><br>
        <%# raw sprintf(
            f.date_select(
              :request_day,
              use_month_numbers: true,
              date_separator: '%s'),
            '年 ', '月 ') + '日' %>
        <input multiple="multiple"  name="schedule[request_day][]" id="datepicker" readonly>
      </div>

      <div class="request-schedule-field">
        <%= f.label :シフト勤務時間帯 %><br>
        <% @timezones.each_with_index do |timezone,i| %>
          <% if i % 4 == 0 %>
            <br>
            <span class="timezones-checkbox"><%= timezone %> <%= f.check_box :request_timezone ,{ multiple: true }, timezone , nil %></span>
          <% else %>
            <span class="timezones-checkbox"><%= timezone %> <%= f.check_box :request_timezone ,{ multiple: true }, timezone , nil %></span>
          <% end %>
        <% end %>
      </div>

      <div class="request-schedule-field">
        <% if current_user.admin? %>
          <%= f.label :承認可否 %>
          <%= f.radio_button :approved, :true %>
          <%= f.label :approved, "承認", {value: :true, checked: true, style: "display: inline-block;"} %>
          <%= f.radio_button :approved, :false %>
          <%= f.label :approved, "未承認", {value: :false, style: "display: inline-block;"} %>
        <% else %>
          <%= f.hidden_field :approved, :value => false %>
        <% end %>
        <br>
      </div>

      <%= f.submit "シフト申請", class: "schedule-request-button btn btn-primary" %>
    <% end %>
  </div>

  <div class="col-md-6">
    <h3>その他要望</h3>
    <%= bootstrap_form_with(model: @user, url: "/users/#{@user.id}/update_to_comment", local: true) do |f| %>
      <div class="add-store-field">
        <%= f.label :例：週4勤務希望、月給20万以上希望など %><br />
        <%= f.text_area :comment, hide_label: true, placeholder: "255文字以内で記入して下さい", :size => "40x6" %>
      </div>
      <%= f.submit "更新", class: "btn btn-primary" %>
    <% end %>

    <h3>申請済みシフト欄</h3>
      <p>
        条件を指定して検索すると申請済みのシフトが表示されます。<br>
        条件指定なしの場合は全検索となります。
      </p>
    <div>
      <%= search_form_for @schedules_search, url: schedules_requestschedule_path do |f| %>

        <% if current_user.admin? %>
          <%= f.label :id_eq, "ユーザ名"%>
          <%= f.collection_select :user_id_eq, @users, :id, :username, {include_blank: true, selected: current_user.id} %>
        <% else %>
          <%= f.hidden_field :user_id_eq, :value => current_user.id %>
        <% end %>
        <br>
      
        <%= f.label :store_id_eq, "店舗"%>
        <%= f.collection_select :store_id_eq, @stores, :id, :storename, {include_blank: true} %>
        <br>
      
        <%= f.label :request_day_eq, "期間（年月指定）"%>
        <%= raw sprintf(
            f.date_select(
              :request_day_during_year_month,
              discard_day: true,
              include_blank: true,
              use_month_numbers: true,
              date_separator: '%s'),
            '年 ') + '月' %>
        <br>

        <% if current_user.admin? %>
          <%= f.label :request_day_eq, "期間（年月日指定）"%>
          <%= raw sprintf(
              f.date_select(
                :request_day_eq,
                use_month_numbers: true,
                include_blank: true,
                date_separator: '%s'),
              '年 ', '月 ') + '日' %>
          <br>
        <% end %>
      
        <%= f.label :approved_eq, "承認可否"%>
        <%= f.select :approved_eq, [['',nil],['承認済',true],['未承認',false]] %>
        <br>

        <div class="actions ransack-submit"><%= f.submit "検索" %></div>
      <% end %>

      <% if @check.present? %>
        <div class='text-nowrap table-responsive'>
          <table class="table-bordered table-striped table-hover common-table">
            <tr>
              <% if current_user.admin? %>
                <th><%= sort_link(@schedules_search, :user_username, "ユーザ名") %></th>
              <% end %>
              <th><%= sort_link(@schedules_search, :store_storename, "店舗") %></th>
              <th><%= sort_link(@schedules_search, :request_day, "申請日") %></th>
              <th><%= sort_link(@schedules_search, :request_timezone, "内容") %></th>
              <th><%= sort_link(@schedules_search, :approved, "承認") %></th>
            </tr>
            <% @schedules.each do |schedule| %>
              <tr class="schedules_<%= schedule.id %>">
                <%= render partial: "schedules/requested_schedules", locals: { schedule: schedule} %>
              </tr>
            <% end %>
            <%= paginate @schedules %>
          </table>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  $(function() {
    var today = new Date();
    $('#datepicker').multiDatesPicker({
      dateFormat: "yy/mm/dd",
	    altField: '#altField',
      minDate: 0,
      multidate: true,
      defaultDate: "0d",
      onSelect: function() {
        // Get the "datepicker" object.
        var datepickerObj = $(this).data("datepicker");
        // Get the "settings" object within "datepicker".
        var datepickerSettings = datepickerObj.settings;
        // Get the last date picked.
        var d = new Date();
        var dayDiff = datepickerObj.selectedDay - d.getDate();
        var monthDiff = datepickerObj.selectedMonth - d.getMonth();
        var yearDiff = datepickerObj.selectedYear - d.getFullYear();
        var pickedDate =
          "+" + dayDiff + "d +" + monthDiff + "m +" + yearDiff + "y";
        // Remove previous "defaultDate" property.
        delete datepickerSettings["defaultDate"];
        // Add a new defaultDate property : value.
        datepickerSettings.defaultDate = pickedDate;
        // Avoid having to click twice on prev/next month.
        $("#datepicker").blur();
        setTimeout(function() {
          $("#datepicker").focus();
        }, 1); // 1 millisecond delay seems to be enought!!!
      }
    });
  });
</script>
<script>
  /*
   * MultiDatesPicker v1.6.4
   * http://multidatespickr.sourceforge.net/
   * 
   * Copyright 2014, Luca Lauretta
   * Dual licensed under the MIT or GPL version 2 licenses.
   */
  (function( $ ){
  	$.extend($.ui, { multiDatesPicker: { version: "1.6.4" } });
  	
  	$.fn.multiDatesPicker = function(method) {
  		var mdp_arguments = arguments;
  		var ret = this;
  		var today_date = new Date();
  		var day_zero = new Date(0);
  		var mdp_events = {};
  		
  		function removeDate(date, type) {
  			if(!type) type = 'picked';
  			date = dateConvert.call(this, date);
  			for(var i = 0; i < this.multiDatesPicker.dates[type].length; i++)
  				if(!methods.compareDates(this.multiDatesPicker.dates[type][i], date))
  					return this.multiDatesPicker.dates[type].splice(i, 1).pop();
  		}
  		function removeIndex(index, type) {
  			if(!type) type = 'picked';
  			return this.multiDatesPicker.dates[type].splice(index, 1).pop();
  		}
  		function addDate(date, type, no_sort) {
  			if(!type) type = 'picked';
  			date = dateConvert.call(this, date);
  			
  			// @todo: use jQuery UI datepicker method instead
  			date.setHours(0);
  			date.setMinutes(0);
  			date.setSeconds(0);
  			date.setMilliseconds(0);
  			
  			if (methods.gotDate.call(this, date, type) === false) {
  				this.multiDatesPicker.dates[type].push(date);
  				if(!no_sort) this.multiDatesPicker.dates[type].sort(methods.compareDates);
  			} 
  		}
  		function sortDates(type) {
  			if(!type) type = 'picked';
  			this.multiDatesPicker.dates[type].sort(methods.compareDates);
  		}
  		function dateConvert(date, desired_type, date_format) {
  			if(!desired_type) desired_type = 'object';/*
  			if(!date_format && (typeof date == 'string')) {
  				date_format = $(this).datepicker('option', 'dateFormat');
  				if(!date_format) date_format = $.datepicker._defaults.dateFormat;
  			}
  			*/
  			return methods.dateConvert.call(this, date, desired_type, date_format);
  		}
  		
  		var methods = {
  			init : function( options ) {
  				var $this = $(this);
  				this.multiDatesPicker.changed = false;
  				
  				var mdp_events = {
  					beforeShow: function(input, inst) {
  						this.multiDatesPicker.changed = false;
  						if(this.multiDatesPicker.originalBeforeShow) 
  							this.multiDatesPicker.originalBeforeShow.call(this, input, inst);
  					},
  					onSelect : function(dateText, inst) {
  						var $this = $(this);
  						this.multiDatesPicker.changed = true;
  						
  						if (dateText) {
  							$this.multiDatesPicker('toggleDate', dateText);
  							this.multiDatesPicker.changed = true;
  							// @todo: this will be optimized when I'll move methods to the singleton.
  						}
  						
  						if (this.multiDatesPicker.mode == 'normal' && this.multiDatesPicker.pickableRange) {
  							if(this.multiDatesPicker.dates.picked.length > 0) {
  								var min_date = this.multiDatesPicker.dates.picked[0],
  									max_date = new Date(min_date.getTime());
  								
  								methods.sumDays(max_date, this.multiDatesPicker.pickableRange-1);
  									
  								// counts the number of disabled dates in the range
  								if(this.multiDatesPicker.adjustRangeToDisabled) {
  									var c_disabled, 
  										disabled = this.multiDatesPicker.dates.disabled.slice(0);
  									do {
  										c_disabled = 0;
  										for(var i = 0; i < disabled.length; i++) {
  											if(disabled[i].getTime() <= max_date.getTime()) {
  												if((min_date.getTime() <= disabled[i].getTime()) && (disabled[i].getTime() <= max_date.getTime()) ) {
  													c_disabled++;
  												}
  												disabled.splice(i, 1);
  												i--;
  											}
  										}
  										max_date.setDate(max_date.getDate() + c_disabled);
  									} while(c_disabled != 0);
  								}
  								
  								if(this.multiDatesPicker.maxDate && (max_date > this.multiDatesPicker.maxDate))
  									max_date = this.multiDatesPicker.maxDate;
  								
  								$this
  									.datepicker("option", "minDate", min_date)
  									.datepicker("option", "maxDate", max_date);
  							} else {
  								$this
  									.datepicker("option", "minDate", this.multiDatesPicker.minDate)
  									.datepicker("option", "maxDate", this.multiDatesPicker.maxDate);
  							}
  						}
  						
  						if(this.multiDatesPicker.originalOnSelect && dateText)
  							this.multiDatesPicker.originalOnSelect.call(this, dateText, inst);
  						
  					},
  					beforeShowDay : function(date) {
  						var $this = $(this),
  							gotThisDate = $this.multiDatesPicker('gotDate', date) !== false,
  							isDisabledCalendar = $this.datepicker('option', 'disabled'),
  							isDisabledDate = $this.multiDatesPicker('gotDate', date, 'disabled') !== false,
  							areAllSelected = this.multiDatesPicker.maxPicks <= this.multiDatesPicker.dates.picked.length;
  						
  						var bsdReturn = [true, '', null];
  						if(this.multiDatesPicker.originalBeforeShowDay)
  							bsdReturn = this.multiDatesPicker.originalBeforeShowDay.call(this, date);
  						
  						bsdReturn[1] = gotThisDate ? 'ui-state-highlight '+bsdReturn[1] : bsdReturn[1];
  						bsdReturn[0] = bsdReturn[0] && !(isDisabledCalendar || isDisabledDate || (areAllSelected && !bsdReturn[1]));
  						return bsdReturn;
  					}
  				};
  				
  				// value have to be extracted before datepicker is initiated
  				if($this.val()) var inputDates = $this.val()
  				
  				if(options) {
  					// value have to be extracted before datepicker is initiated
  					//if(options.altField) var inputDates = $(options.altField).val();
  					if(options.separator) this.multiDatesPicker.separator = options.separator;
  					if(!this.multiDatesPicker.separator) this.multiDatesPicker.separator = ', ';
  					
  					this.multiDatesPicker.originalBeforeShow = options.beforeShow;
  					this.multiDatesPicker.originalOnSelect = options.onSelect;
  					this.multiDatesPicker.originalBeforeShowDay = options.beforeShowDay;
  					this.multiDatesPicker.originalOnClose = options.onClose;
  					
  					// datepicker init
  					$this.datepicker(options);
  					
  					this.multiDatesPicker.minDate = $.datepicker._determineDate(this, options.minDate, null);
  					this.multiDatesPicker.maxDate = $.datepicker._determineDate(this, options.maxDate, null);
  					if(options.addDates) methods.addDates.call(this, options.addDates);
  					 
  					if(options.addDisabledDates)
  						methods.addDates.call(this, options.addDisabledDates, 'disabled');
  					
  					methods.setMode.call(this, options);
  				} else {
  					$this.datepicker();
  				}
  				$this.datepicker('option', mdp_events);
  				
  				// adds any dates found in the input or alt field
  				if(inputDates) $this.multiDatesPicker('value', inputDates);
  				
  				// generates the new string of added dates
  				var inputs_values = $this.multiDatesPicker('value');
  				
  				// fills the input field back with all the dates in the calendar
  				$this.val(inputs_values);
  				
  				// Fixes the altField filled with defaultDate by default
  				var altFieldOption = $this.datepicker('option', 'altField');
  				if (altFieldOption) $(altFieldOption).val(inputs_values);
  				
  				// Updates the calendar view
  				$this.datepicker('refresh');
  			},
  			compareDates : function(date1, date2) {
  				date1 = dateConvert.call(this, date1);
  				date2 = dateConvert.call(this, date2);
  				// return > 0 means date1 is later than date2 
  				// return == 0 means date1 is the same day as date2 
  				// return < 0 means date1 is earlier than date2 
  				var diff = date1.getFullYear() - date2.getFullYear();
  				if(!diff) {
  					diff = date1.getMonth() - date2.getMonth();
  					if(!diff) 
  						diff = date1.getDate() - date2.getDate();
  				}
  				return diff;
  			},
  			sumDays : function( date, n_days ) {
  				var origDateType = typeof date;
  				obj_date = dateConvert.call(this, date);
  				obj_date.setDate(obj_date.getDate() + n_days);
  				return dateConvert.call(this, obj_date, origDateType);
  			},
  			dateConvert : function( date, desired_format, dateFormat ) {
  				var from_format = typeof date;
  				var $this = $(this);
  				
  				if(from_format == desired_format) {
  					if(from_format == 'object') {
  						try {
  							date.getTime();
  						} catch (e) {
  							$.error('Received date is in a non supported format!');
  							return false;
  						}
  					}
  					return date;
  				}
  				
  				if(typeof date == 'undefined') date = new Date(0);
  				
  				if(desired_format != 'string' && desired_format != 'object' && desired_format != 'number')
  					$.error('Date format "'+ desired_format +'" not supported!');
  				
  				if(!dateFormat) {
  					// thanks to bibendus83 -> http://sourceforge.net/tracker/index.php?func=detail&aid=3213174&group_id=358205&atid=1495382
  					var dp_dateFormat = $this.datepicker('option', 'dateFormat');
  					if (dp_dateFormat) {
  						dateFormat = dp_dateFormat;
  					} else {
  						dateFormat = $.datepicker._defaults.dateFormat;
  					}
  				}
  				
  				// converts to object as a neutral format
  				switch(from_format) {
  					case 'object': break;
  					case 'string': date = $.datepicker.parseDate(dateFormat, date); break;
  					case 'number': date = new Date(date); break;
  					default: $.error('Conversion from "'+ desired_format +'" format not allowed on jQuery.multiDatesPicker');
  				}
  				// then converts to the desired format
  				switch(desired_format) {
  					case 'object': return date;
  					case 'string': return $.datepicker.formatDate(dateFormat, date);
  					case 'number': return date.getTime();
  					default: $.error('Conversion to "'+ desired_format +'" format not allowed on jQuery.multiDatesPicker');
  				}
  				return false;
  			},
  			gotDate : function( date, type ) {
  				if(!type) type = 'picked';
  				for(var i = 0; i < this.multiDatesPicker.dates[type].length; i++) {
  					if(methods.compareDates.call(this, this.multiDatesPicker.dates[type][i], date) === 0) {
  						return i;
  					}
  				}
  				return false;
  			},
  			value : function( value ) {
  				if(value && typeof value == 'string') {
  					methods.addDates.call(this, value.split(this.multiDatesPicker.separator));
  				} else {
  					var dates = methods.getDates.call(this, 'string');
  					return dates.length
  						? dates.join(this.multiDatesPicker.separator)
  						: "";
  				}
  			},
  			getDates : function( format, type ) {
  				if(!format) format = 'string';
  				if(!type) type = 'picked';
  				switch (format) {
  					case 'object':
  						return this.multiDatesPicker.dates[type];
  					case 'string':
  					case 'number':
  						var o_dates = new Array();
  						for(var i in this.multiDatesPicker.dates[type])
  							o_dates.push(
  								dateConvert.call(
  									this, 
  									this.multiDatesPicker.dates[type][i], 
  									format
  								)
  							);
  						return o_dates;
  					
  					default: $.error('Format "'+format+'" not supported!');
  				}
  			},
  			addDates : function( dates, type ) {
  				if(dates.length > 0) {
  					if(!type) type = 'picked';
  					switch(typeof dates) {
  						case 'object':
  						case 'array':
  							if(dates.length) {
  								for(var i = 0; i < dates.length; i++)
  									addDate.call(this, dates[i], type, true);
  								sortDates.call(this, type);
  								break;
  							} // else does the same as 'string'
  						case 'string':
  						case 'number':
  							addDate.call(this, dates, type);
  							break;
  						default: 
  							$.error('Date format "'+ typeof dates +'" not allowed on jQuery.multiDatesPicker');
  					}
  					//$(this).datepicker('refresh');
  				} else {
  					$.error('Empty array of dates received.');
  				}
  			},
  			removeDates : function( dates, type ) {
  				if(!type) type = 'picked';
  				var removed = [];
  				if (Object.prototype.toString.call(dates) === '[object Array]') {
  					for(var i in dates.sort(function(a,b){return b-a})) {
  						removed.push(removeDate.call(this, dates[i], type));
  					}
  				} else {
  					removed.push(removeDate.call(this, dates, type));
  				}
  				return removed;
  			},
  			removeIndexes : function( indexes, type ) {
  				if(!type) type = 'picked';
  				var removed = [];
  				if (Object.prototype.toString.call(indexes) === '[object Array]') {
  					for(var i in indexes.sort(function(a,b){return b-a})) {
  						removed.push(removeIndex.call(this, indexes[i], type));
  					}
  				} else {
  					removed.push(removeIndex.call(this, indexes, type));
  				}
  				return removed;
  			},
  			resetDates : function ( type ) {
  				if(!type) type = 'picked';
  				this.multiDatesPicker.dates[type] = [];
  			},
  			toggleDate : function( date, type ) {
  				if(!type) type = 'picked';
  				
  				switch(this.multiDatesPicker.mode) {
  					case 'daysRange':
  						this.multiDatesPicker.dates[type] = []; // deletes all picked/disabled dates
  						var end = this.multiDatesPicker.autoselectRange[1];
  						var begin = this.multiDatesPicker.autoselectRange[0];
  						if(end < begin) { // switch
  							end = this.multiDatesPicker.autoselectRange[0];
  							begin = this.multiDatesPicker.autoselectRange[1];
  						}
  						for(var i = begin; i < end; i++) 
  							methods.addDates.call(this, methods.sumDays.call(this,date, i), type);
  						break;
  					default:
  						if(methods.gotDate.call(this, date) === false) // adds dates
  							methods.addDates.call(this, date, type);
  						else // removes dates
  							methods.removeDates.call(this, date, type);
  						break;
  				}
  			}, 
  			setMode : function( options ) {
  				var $this = $(this);
  				if(options.mode) this.multiDatesPicker.mode = options.mode;
  				
  				switch(this.multiDatesPicker.mode) {
  					case 'normal':
  						for(option in options)
  							switch(option) {
  								case 'maxPicks':
  								case 'minPicks':
  								case 'pickableRange':
  								case 'adjustRangeToDisabled':
  									this.multiDatesPicker[option] = options[option];
  									break;
  								//default: $.error('Option ' + option + ' ignored for mode "'.options.mode.'".');
  							}
  					break;
  					case 'daysRange':
  					case 'weeksRange':
  						var mandatory = 1;
  						for(option in options)
  							switch(option) {
  								case 'autoselectRange':
  									mandatory--;
  								case 'pickableRange':
  								case 'adjustRangeToDisabled':
  									this.multiDatesPicker[option] = options[option];
  									break;
  								//default: $.error('Option ' + option + ' does not exist for setMode on jQuery.multiDatesPicker');
  							}
  						if(mandatory > 0) $.error('Some mandatory options not specified!');
  					break;
  				}
  				
  				/*
  				if(options.pickableRange) {
  					$this.datepicker("option", "maxDate", options.pickableRange);
  					$this.datepicker("option", "minDate", this.multiDatesPicker.minDate);
  				}
  				*/
  				
  				if(mdp_events.onSelect)
  					mdp_events.onSelect();
  			},
  			destroy: function(){
  				this.multiDatesPicker = null;
  				$(this).datepicker('destroy');
  			}
  		};
  		
  		this.each(function() {
  			var $this = $(this);
  			if (!this.multiDatesPicker) {
  				this.multiDatesPicker = {
  					dates: {
  						picked: [],
  						disabled: []
  					},
  					mode: 'normal',
  					adjustRangeToDisabled: true
  				};
  			}
  			
  			if(methods[method]) {
  				var exec_result = methods[method].apply(this, Array.prototype.slice.call(mdp_arguments, 1));
  				switch(method) {
  					case 'removeDates':
  					case 'removeIndexes':
  					case 'resetDates':
  					case 'toggleDate':
  					case 'addDates':
  						var altField = $this.datepicker('option', 'altField');
  						// @todo: should use altFormat for altField
  						var dates_string = methods.value.call(this);
  						if (altField !== undefined && altField != "") {
  							$(altField).val(dates_string);
  						}
  						$this.val(dates_string);
  						
  						$.datepicker._refreshDatepicker(this);
  				}
  				switch(method) {
  					case 'removeDates':
  					case 'getDates':
  					case 'gotDate':
  					case 'sumDays':
  					case 'compareDates':
  					case 'dateConvert':
  					case 'value':
  						ret = exec_result;
  				}
  				return exec_result;
  			} else if( typeof method === 'object' || ! method ) {
  				return methods.init.apply(this, mdp_arguments);
  			} else {
  				$.error('Method ' +  method + ' does not exist on jQuery.multiDatesPicker');
  			}
  			return false;
  		}); 
  		
  		return ret;
  	};
  
  	var PROP_NAME = 'multiDatesPicker';
  	var dpuuid = new Date().getTime();
  	var instActive;
  
  	$.multiDatesPicker = {version: false};
  	//$.multiDatesPicker = new MultiDatesPicker(); // singleton instance
  	$.multiDatesPicker.initialized = false;
  	$.multiDatesPicker.uuid = new Date().getTime();
  	$.multiDatesPicker.version = $.ui.multiDatesPicker.version;
  	
  	// allows MDP not to hide everytime a date is picked
  	$.multiDatesPicker._hideDatepicker = $.datepicker._hideDatepicker;
  	$.datepicker._hideDatepicker = function(){
  		var target = this._curInst.input[0];
  		var mdp = target.multiDatesPicker;
  		if(!mdp || (this._curInst.inline === false && !mdp.changed)) {
  			return $.multiDatesPicker._hideDatepicker.apply(this, arguments);
  		} else {
  			mdp.changed = false;
  			$.datepicker._refreshDatepicker(target);
  			return;
  		}
  	};
  
  	// Workaround for #4055
  	// Add another global to avoid noConflict issues with inline event handlers
  	window['DP_jQuery_' + dpuuid] = $;
  })( jQuery );
</script>